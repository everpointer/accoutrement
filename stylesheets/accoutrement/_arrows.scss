// Arrows
// ======

@include set(arrows, (
  position: top,
  offset: center,
  direction: auto,
  size: 1em,
  color: black,
  border-width: null,
  border-color: null,
));


// Arrow
// -----
@mixin arrow(
  $arrow: get(arrows),
  $root: relative
) {
  $arrow: _build-arrow($arrow);
  $_body: map-get($arrow, body);
  $_border: map-get($arrow, border);

  position: $root;

  &::after {
    @extend %_arrow-base;
    @include output-map($_body);
  }

  &::before {
    @if $_border { @extend %_arrow-base; }
    @include output-map($_border);
  }
}


// Arrow Base
// ----------
@mixin _arrow-base {
  content: " ";
  position: absolute;
  height: 0;
  width: 0;
  border: solid transparent;
  pointer-events: none;
}

%_arrow-base {
  @include _arrow-base;
}


// Parse Arrow
// -----------
@function _parse-arrow(
  $arrow: null
) {
  $_return: get(arrows);
  $_numbers: ();
  $_strings: ();

  @if type-of($arrow) == map {
    $_return: map-merge($_return, $arrow);
  } @else if $arrow {

    @each $val in $arrow {
      @if type-of($val) == map {
        $_return: map-merge($_return, $val);
      } @else if type-of($val) == color {
        $_return: map-merge($_return, (color: $val));
      } @else if type-of($val) == string {
        @if index(auto up down forward backward, $val) {
          $_return: map-merge($_return, (direction: $val));
        } @else {
          $_strings: append($_strings, $val);
        }
      } @else if type-of($val) == number {
        $_numbers: append($_numbers, $val);
      }
    }

    @if length($_strings) > 0 {
      $_return: map-merge($_return, (position: nth($_strings, 1)));
      @if length($_strings) > 1 {
        $_return: map-merge($_return, (offset: nth($_strings, 2)));
      }
    }

    @if length($_numbers) > 0 {
      $_return: map-merge($_return, (size: nth($_numbers, 1)));
      @if length($_numbers) > 1 {
        $_return: map-merge($_return, (offset: nth($_numbers, 2)));
      }
    }
  }

  @return $_return;
}


// Build Arrow
// -----------
@function _build-arrow(
  $arrow
) {
  $arrow: _parse-arrow($arrow);
  $_position: map-get($arrow, position);
  $_offset: map-get($arrow, offset);
  $_color: map-get($arrow, color);
  $_size: map-get($arrow, size);
  $_border-color: map-get($arrow, border-color);
  $_border-size: map-get($arrow, border-width);
  $_opposite: opposite-position($_position);

  $_offset-position: if($_position == left or $_position == right, top, left);

  @if $_offset == 'bottom' or $_offset == 'right' {
    $_offset-position: opposite-position($_offset-position);
  } @else if type-of($_offset) == "number" and $_offset != abs($_offset) {
    $_offset-position: opposite-position($_offset-position);
  }

  $_border: null;
  $_body: (
    #{$_opposite}: 100%,
    border-#{$_opposite}-color: $_color,
    border-width: $_size,
  );

  @if $_offset {
    @if $_offset == 'center' {
      $_body: map-merge($_body, (
        #{$_offset-position}: 50%,
        margin-#{$_offset-position}: - $_size,
      ));
    } @else if type-of($_offset) == 'string' {
      $_body: map-merge($_body, (
        #{$_offset-position}: 0,
      ));
    } @else {
      $_body: map-merge($_body, (
        #{$_offset-position}: abs($_offset),
      ));
    }
  }

  @if $_border-size and $_border-color {

    $_border: map-merge($_body, (
      border-#{$_opposite}-color: $_border-color,
      margin-#{$_offset-position}: if($_offset == center, 0 - $_size, null),
      margin-#{$_opposite}: $_border-size,
    ));
  }

  @return (
    body: $_body,
    border: $_border,
  );
}
