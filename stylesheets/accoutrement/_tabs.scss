// ---------------------------------------------------------------------------
// Imports

@import "a11y";

// ---------------------------------------------------------------------------
// CSS Tabs and Accordion

// Create tabs with pure css & html.
//
// # Markup (within a shared container):
// 1. radio or checkbox inputs   : [id*="SLUG"]
// 2. labels for those inpults   : [for*="SLUG"]
// 3. content for each tab       : [class*="SLUG"];
//
// - The labels and content can be nested,
//  as long as you pass that nesting information along to the `tabs` mixin.
//  You can also change the default setting with `$default-nested-selectors`.
// - You can also change the selector attributes with the
//  `$toggle-attribute`, `$title-attribute`, & `$content-attribute` settings.
// - By default, we use the ':checked' attribute to know what tabs are active.
//  You can change that `$default-checked-selector` setting,
//  or the `$checked` argument in the `tabs` mixin.
//
// # Styles
// 1. hidden content             : %hide-tab-content { ... };
// 2. visible content            : %show-tab-content { ... };
// 3. active tab title           : %active-tab-title { ... };
//
// There are some very basic default styles that you can use to get started.
// Simply `@include tab-defaults` and see it in action.
//
// # Tabs Example:
//
// section.mytabs
//   input[type="radio"]#first-tab-toggle
//   input[type="radio"]#second-tab-toggle
//   input[type="radio"]#third-tab-toggle
//
//   label[for="first-tab-toggle"]
//      "First Tab"
//   label[for="second-tab-toggle"]
//      "Second Tab"
//   label[for="third-tab-toggle"]
//      "Third Tab"
//
//   article.first
//      "Content for the first tab"
//   article.second
//      "Content for the first tab"
//   article.third
//      "Content for the first tab"
//
// @include tab-defaults;
// @include tabs(first second third);
//
// # Accordion Example
//
// section.accordion
//   input[type="checkbox"]#first-toggle
//   input[type="checkbox"]#second-toggle
//   input[type="checkbox"]#third-toggle
//
//   article
//    label[for="first-toggle"]
//      "First Section"
//    div.first
//      "Content for the first section"
//
//   article
//    label[for="second-toggle"]
//      "Second Section"
//    div.second
//      "Content for the first section"
//
//   article
//    label[for="third-toggle"]
//      "Third Section"
//    div.third
//      "Content for the first section"
//
// @include tab-defaults;
// @include tabs(first second third, article);

// ---------------------------------------------------------------------------
// Settings

// We don't need the radio-inputs to display.
%hide-tab-toggle {
  position: absolute;
  left: -9999px;
  opacity: 0;
}

// The CSS3 `:checked` selector is not supported by IE7 and IE8.
// For legacy support, use `[aria-checked="true"]` applied with JavaScrip.
$default-checked-selector : ':checked'      !default;
$default-nested-selectors : null            !default;

// Change the attributes used for each selector.
// These attributes need to be different,
// since everything else is the same in the selectors.
$toggle-attribute   : id      !default;
$title-attribute    : for     !default;
$content-attribute  : class   !default;

// ---------------------------------------------------------------------------
// Mixins

// Default styles for the content and the tab titles
//
// @include tab-defaults
// - %hide-tab-content: Applied to hidden tabs.
// - %show-tab-content: Applied to visible tabs.
// - %active-tab-title: Applied to the tab-title for the active tab.
@mixin tab-defaults {
  %hide-tab-content { display: none; }
  %show-tab-content { display: block; }
  %active-tab-title { font-weight: bold; }
}

// Create tabs for the given slugs
//
// @include make-tabs($slugs [, $nested, $checked])
// - $slugs   : The slugs to use in tab selectors.
// - $nested  : If the tabs or content are nested, add those selectors as well.
//              - One selector will be used for both
//              - Two selectors will be split: first tabs, then content
//              - Use `null` to unset one e.g. '.tab-selector null'
// - $checked : How we know when a toggle is checked e.g. ':checked'.
@mixin tabs(
  $slugs,
  $nested: $default-nested-selectors,
  $checked: $default-checked-selector
) {
  $nested-tabs: $nested;
  $nested-content: $nested;
  @if length($nested) > 1 {
    $nested-tabs: nth($nested, 1);
    $nested-content: nth($nested, 2);
  }

  @each $slug in $slugs {
    $toggle   : '[#{$toggle-attribute}*="#{$slug}"]';
    $title    : '[#{$title-attribute}*="#{$slug}"]';
    $content  : '[#{$content-attribute}*="#{$slug}"]';

    #{$content} { @extend %hide-tab-content; }
    #{$toggle} {
      @extend %hide-tab-toggle;
      &#{$checked} {
        & ~ #{$nested-tabs} #{$title} {
          @extend %active-tab-title !optional;
        }
        & ~ #{$nested-content} #{$content} {
          @extend %show-tab-content;
        }
      }
    }
  }
}
