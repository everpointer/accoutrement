// Color Toolkit
// =============

@include set(color-keywords, (
  lightest: 80%,
  lighter: 50%,
  light: 20%,
  dark: -20%,
  darker: -50%,
  darkest: -80%,
));

$contrasted-dark-default  : black     !default;
$contrasted-light-default : white     !default;


// Color
// -----
@function color(
  $args,
  $alpha: 1
) {
  $args: _parse-color($args);
  $_color: map-get($args, color);
  $_lightness: map-get($args, lightness);
  $_saturation: map-get($args, saturation);

  @if $_lightness {
    @if $_lightness > 0 {
      $_color: tint($_color, $_lightness);
    } @else if $_lightness < 0 {
      $_color: shade($_color, abs($_lightness));
    }
  }

  @if $_saturation {
    $_color: scale-color($_color, $saturation: $_saturation);
  }

  @return rgba($_color, $alpha);
}


// Contrast
// --------
@function contrast(
  $color,
  $contrast: $contrasted-dark-default $contrasted-light-default
) {
  $contrasted-light: false;
  $contrasted-dark: false;

  @if length($contrast) == 2 {
    $light1: brightness(nth($contrast,1));
    $light2: brightness(nth($contrast,2));
    $contrasted-light: if($light1 > $light2, nth($contrast,1), nth($contrast,2));
    $contrasted-dark: if($light1 < $light2, nth($contrast,1), nth($contrast,2));
  } @else {
    @warn "Contrast takes two colors (light & dark) for the second argument.";
  }

  $color-brightness: brightness($color);
  $light-contrast-brightness: brightness($contrasted-light);
  $dark-contrast-brightness: brightness($contrasted-dark);

  $light-diff: abs($color-brightness - $light-contrast-brightness);
  $dark-diff: abs($color-brightness - $dark-contrast-brightness);

  @return if($light-diff > $dark-diff, $contrasted-light, $contrasted-dark);
}


// Parse Color
// -----------
@function _parse-color(
  $args
) {
  $_has-color: false;
  $_return: (
    color: gray,
    lightness: null,
    saturation: null,
  );

  @each $arg in $args {
    @if type-of($arg) == color {
      $_return: map-merge($_return, (color: $arg));
      $_has-color: true;
    }

    @else if type-of($arg) == number {
      @if $_has-color or length($args) == 1 {
        $_return: map-merge($_return, (lightness: $arg));
      } @else {
        $_return: map-merge($_return, (saturation: $arg));
      }
    }

    @else if type-of($arg) == string {
      $arg: get(color-keywords, $arg);
      $_return: map-merge($_return, (lightness: $arg));
    }
  }

  @return $_return;
}
